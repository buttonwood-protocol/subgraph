// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BondCreated extends ethereum.Event {
  get params(): BondCreated__Params {
    return new BondCreated__Params(this);
  }
}

export class BondCreated__Params {
  _event: BondCreated;

  constructor(event: BondCreated) {
    this._event = event;
  }

  get newBondAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BondFactory extends ethereum.SmartContract {
  static bind(address: Address): BondFactory {
    return new BondFactory("BondFactory", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bonds(param0: Bytes): Address {
    let result = super.call("bonds", "bonds(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_bonds(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("bonds", "bonds(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createBond(
    _collateralToken: Address,
    trancheRatios: Array<BigInt>,
    maturityDate: BigInt
  ): Address {
    let result = super.call(
      "createBond",
      "createBond(address,uint256[],uint256):(address)",
      [
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromUnsignedBigIntArray(trancheRatios),
        ethereum.Value.fromUnsignedBigInt(maturityDate)
      ]
    );

    return result[0].toAddress();
  }

  try_createBond(
    _collateralToken: Address,
    trancheRatios: Array<BigInt>,
    maturityDate: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createBond",
      "createBond(address,uint256[],uint256):(address)",
      [
        ethereum.Value.fromAddress(_collateralToken),
        ethereum.Value.fromUnsignedBigIntArray(trancheRatios),
        ethereum.Value.fromUnsignedBigInt(maturityDate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  target(): Address {
    let result = super.call("target", "target():(address)", []);

    return result[0].toAddress();
  }

  try_target(): ethereum.CallResult<Address> {
    let result = super.tryCall("target", "target():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trancheFactory(): Address {
    let result = super.call("trancheFactory", "trancheFactory():(address)", []);

    return result[0].toAddress();
  }

  try_trancheFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trancheFactory",
      "trancheFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _trancheFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateBondCall extends ethereum.Call {
  get inputs(): CreateBondCall__Inputs {
    return new CreateBondCall__Inputs(this);
  }

  get outputs(): CreateBondCall__Outputs {
    return new CreateBondCall__Outputs(this);
  }
}

export class CreateBondCall__Inputs {
  _call: CreateBondCall;

  constructor(call: CreateBondCall) {
    this._call = call;
  }

  get _collateralToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get trancheRatios(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get maturityDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateBondCall__Outputs {
  _call: CreateBondCall;

  constructor(call: CreateBondCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
