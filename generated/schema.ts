// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bondCount(): BigInt {
    let value = this.get("bondCount");
    return value!.toBigInt();
  }

  set bondCount(value: BigInt) {
    this.set("bondCount", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value!.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value!.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }
}

export class Tranche extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tranche entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tranche must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Tranche", id.toString(), this);
    }
  }

  static load(id: string): Tranche | null {
    return changetype<Tranche | null>(store.get("Tranche", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bond(): string {
    let value = this.get("bond");
    return value!.toString();
  }

  set bond(value: string) {
    this.set("bond", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get ratio(): BigInt {
    let value = this.get("ratio");
    return value!.toBigInt();
  }

  set ratio(value: BigInt) {
    this.set("ratio", Value.fromBigInt(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value!.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get totalCollateral(): BigInt {
    let value = this.get("totalCollateral");
    return value!.toBigInt();
  }

  set totalCollateral(value: BigInt) {
    this.set("totalCollateral", Value.fromBigInt(value));
  }

  get totalCollateralSimulated(): BigInt {
    let value = this.get("totalCollateralSimulated");
    return value!.toBigInt();
  }

  set totalCollateralSimulated(value: BigInt) {
    this.set("totalCollateralSimulated", Value.fromBigInt(value));
  }

  get totalCollateralAtMaturity(): BigInt | null {
    let value = this.get("totalCollateralAtMaturity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateralAtMaturity(value: BigInt | null) {
    if (!value) {
      this.unset("totalCollateralAtMaturity");
    } else {
      this.set("totalCollateralAtMaturity", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalSupplyAtMaturity(): BigInt | null {
    let value = this.get("totalSupplyAtMaturity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupplyAtMaturity(value: BigInt | null) {
    if (!value) {
      this.unset("totalSupplyAtMaturity");
    } else {
      this.set("totalSupplyAtMaturity", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Bond extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bond entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bond must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bond", id.toString(), this);
    }
  }

  static load(id: string): Bond | null {
    return changetype<Bond | null>(store.get("Bond", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get depositLimit(): BigInt {
    let value = this.get("depositLimit");
    return value!.toBigInt();
  }

  set depositLimit(value: BigInt) {
    this.set("depositLimit", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get collateral(): string {
    let value = this.get("collateral");
    return value!.toString();
  }

  set collateral(value: string) {
    this.set("collateral", Value.fromString(value));
  }

  get tranches(): Array<string> {
    let value = this.get("tranches");
    return value!.toStringArray();
  }

  set tranches(value: Array<string>) {
    this.set("tranches", Value.fromStringArray(value));
  }

  get feeBps(): BigInt {
    let value = this.get("feeBps");
    return value!.toBigInt();
  }

  set feeBps(value: BigInt) {
    this.set("feeBps", Value.fromBigInt(value));
  }

  get startDate(): BigInt {
    let value = this.get("startDate");
    return value!.toBigInt();
  }

  set startDate(value: BigInt) {
    this.set("startDate", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value!.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get maturedDate(): BigInt | null {
    let value = this.get("maturedDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturedDate(value: BigInt | null) {
    if (!value) {
      this.unset("maturedDate");
    } else {
      this.set("maturedDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get isMature(): boolean {
    let value = this.get("isMature");
    return value!.toBoolean();
  }

  set isMature(value: boolean) {
    this.set("isMature", Value.fromBoolean(value));
  }

  get totalDebt(): BigInt {
    let value = this.get("totalDebt");
    return value!.toBigInt();
  }

  set totalDebt(value: BigInt) {
    this.set("totalDebt", Value.fromBigInt(value));
  }

  get totalDebtAtMaturity(): BigInt | null {
    let value = this.get("totalDebtAtMaturity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalDebtAtMaturity(value: BigInt | null) {
    if (!value) {
      this.unset("totalDebtAtMaturity");
    } else {
      this.set("totalDebtAtMaturity", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalCollateral(): BigInt {
    let value = this.get("totalCollateral");
    return value!.toBigInt();
  }

  set totalCollateral(value: BigInt) {
    this.set("totalCollateral", Value.fromBigInt(value));
  }

  get totalCollateralAtMaturity(): BigInt | null {
    let value = this.get("totalCollateralAtMaturity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalCollateralAtMaturity(value: BigInt | null) {
    if (!value) {
      this.unset("totalCollateralAtMaturity");
    } else {
      this.set("totalCollateralAtMaturity", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenNames(): string {
    let value = this.get("tokenNames");
    return value!.toString();
  }

  set tokenNames(value: string) {
    this.set("tokenNames", Value.fromString(value));
  }

  get collateralSymbol(): string {
    let value = this.get("collateralSymbol");
    return value!.toString();
  }

  set collateralSymbol(value: string) {
    this.set("collateralSymbol", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value!.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }
}

export class AccountBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountBalance", id.toString(), this);
    }
  }

  static load(id: string): AccountBalance | null {
    return changetype<AccountBalance | null>(store.get("AccountBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get tranche(): string {
    let value = this.get("tranche");
    return value!.toString();
  }

  set tranche(value: string) {
    this.set("tranche", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get modified(): BigInt | null {
    let value = this.get("modified");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set modified(value: BigInt | null) {
    if (!value) {
      this.unset("modified");
    } else {
      this.set("modified", Value.fromBigInt(<BigInt>value));
    }
  }

  get transaction(): Bytes | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromBytes(<Bytes>value));
    }
  }
}

export class CollateralToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollateralToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollateralToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollateralToken", id.toString(), this);
    }
  }

  static load(id: string): CollateralToken | null {
    return changetype<CollateralToken | null>(store.get("CollateralToken", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}
