// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeBps(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeUpdate extends ethereum.Event {
  get params(): FeeUpdate__Params {
    return new FeeUpdate__Params(this);
  }
}

export class FeeUpdate__Params {
  _event: FeeUpdate;

  constructor(event: FeeUpdate) {
    this._event = event;
  }

  get newFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Mature extends ethereum.Event {
  get params(): Mature__Params {
    return new Mature__Params(this);
  }
}

export class Mature__Params {
  _event: Mature;

  constructor(event: Mature) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class RedeemMature extends ethereum.Event {
  get params(): RedeemMature__Params {
    return new RedeemMature__Params(this);
  }
}

export class RedeemMature__Params {
  _event: RedeemMature;

  constructor(event: RedeemMature) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BondController__tranchesResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getRatio(): BigInt {
    return this.value1;
  }
}

export class BondController extends ethereum.SmartContract {
  static bind(address: Address): BondController {
    return new BondController("BondController", address);
  }

  collateralToken(): Address {
    let result = super.call(
      "collateralToken",
      "collateralToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_collateralToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralToken",
      "collateralToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositLimit(): BigInt {
    let result = super.call("depositLimit", "depositLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositLimit", "depositLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeBps(): BigInt {
    let result = super.call("feeBps", "feeBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeBps", "feeBps():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMature(): boolean {
    let result = super.call("isMature", "isMature():(bool)", []);

    return result[0].toBoolean();
  }

  try_isMature(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMature", "isMature():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maturityDate(): BigInt {
    let result = super.call("maturityDate", "maturityDate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maturityDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maturityDate", "maturityDate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDebt(): BigInt {
    let result = super.call("totalDebt", "totalDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalDebt", "totalDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trancheCount(): BigInt {
    let result = super.call("trancheCount", "trancheCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_trancheCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("trancheCount", "trancheCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trancheTokenAddresses(param0: Address): boolean {
    let result = super.call(
      "trancheTokenAddresses",
      "trancheTokenAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_trancheTokenAddresses(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "trancheTokenAddresses",
      "trancheTokenAddresses(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tranches(param0: BigInt): BondController__tranchesResult {
    let result = super.call("tranches", "tranches(uint256):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new BondController__tranchesResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_tranches(
    param0: BigInt
  ): ethereum.CallResult<BondController__tranchesResult> {
    let result = super.tryCall(
      "tranches",
      "tranches(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BondController__tranchesResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _trancheFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _collateralToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get trancheRatios(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _maturityDate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _depositLimit(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class MatureCall extends ethereum.Call {
  get inputs(): MatureCall__Inputs {
    return new MatureCall__Inputs(this);
  }

  get outputs(): MatureCall__Outputs {
    return new MatureCall__Outputs(this);
  }
}

export class MatureCall__Inputs {
  _call: MatureCall;

  constructor(call: MatureCall) {
    this._call = call;
  }
}

export class MatureCall__Outputs {
  _call: MatureCall;

  constructor(call: MatureCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemMatureCall extends ethereum.Call {
  get inputs(): RedeemMatureCall__Inputs {
    return new RedeemMatureCall__Inputs(this);
  }

  get outputs(): RedeemMatureCall__Outputs {
    return new RedeemMatureCall__Outputs(this);
  }
}

export class RedeemMatureCall__Inputs {
  _call: RedeemMatureCall;

  constructor(call: RedeemMatureCall) {
    this._call = call;
  }

  get tranche(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemMatureCall__Outputs {
  _call: RedeemMatureCall;

  constructor(call: RedeemMatureCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get newFeeBps(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
